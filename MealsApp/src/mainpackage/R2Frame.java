/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package mainpackage;

import com.formdev.flatlaf.FlatDarculaLaf;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import entitypackage.Meals;
import entitypackage.MealsJpaController;
import javax.persistence.*;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;
import javax.persistence.Query;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import okhttp3.OkHttpClient;
import okhttp3.Request;


public class R2Frame extends javax.swing.JFrame {
    
    //Entity Manager και Controller
    EntityManagerFactory emf = Persistence.createEntityManagerFactory("MealsAppPU");
    EntityManager em = emf.createEntityManager();
    MealsJpaController mealsController = new MealsJpaController(emf);
    EntityTransaction etx = em.getTransaction();
    
     /**
     * Creates new form Spec2Frame
     */
    public R2Frame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 12), new java.awt.Dimension(0, 12), new java.awt.Dimension(32767, 12));
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 14), new java.awt.Dimension(0, 14), new java.awt.Dimension(32767, 14));
        jPanelSearchDisplay = new javax.swing.JPanel();
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 6), new java.awt.Dimension(0, 6), new java.awt.Dimension(32767, 6));
        jPanelData = new javax.swing.JPanel();
        jLabelMeal = new javax.swing.JLabel();
        jTextFieldMeal = new javax.swing.JTextField();
        jButtonSearch = new javax.swing.JButton();
        jLabelResults = new javax.swing.JLabel();
        jComboBox = new javax.swing.JComboBox<>();
        jButtonDisplay = new javax.swing.JButton();
        filler5 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 6), new java.awt.Dimension(0, 6), new java.awt.Dimension(32767, 6));
        filler6 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 6), new java.awt.Dimension(0, 6), new java.awt.Dimension(32767, 6));
        filler4 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 8), new java.awt.Dimension(0, 8), new java.awt.Dimension(32767, 8));
        jButtonDelete = new javax.swing.JButton();
        jButtonEdit = new javax.swing.JButton();
        jButtonSave = new javax.swing.JButton();
        jSeparator = new javax.swing.JSeparator();
        filler7 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 8), new java.awt.Dimension(0, 8), new java.awt.Dimension(32767, 8));
        jLabelMealName = new javax.swing.JLabel();
        jLabelMealCategory = new javax.swing.JLabel();
        jLabelMealOrigin = new javax.swing.JLabel();
        jLabelMealGuide = new javax.swing.JLabel();
        jTextFieldMealName = new javax.swing.JTextField();
        jTextFieldMealCategory = new javax.swing.JTextField();
        jTextFieldMealArea = new javax.swing.JTextField();
        jScrollPane = new javax.swing.JScrollPane();
        jTextAreaGuide = new javax.swing.JTextArea();
        jTextFieldMealid = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItemR3 = new javax.swing.JMenuItem();
        jMenuItemR4 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItemHome = new javax.swing.JMenuItem();
        jMenuMeal = new javax.swing.JMenu();
        jMenuItemMealSearch = new javax.swing.JMenuItem();
        jMenuItemMealDisplay = new javax.swing.JMenuItem();
        jMenuEdit = new javax.swing.JMenu();
        jMenuItemEditSave = new javax.swing.JMenuItem();
        jMenuItemEditEdit = new javax.swing.JMenuItem();
        jMenuItemEditDelete = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("iMeals ™ 2023");
        setBounds(new java.awt.Rectangle(140, 140, 800, 600));
        setLocation(new java.awt.Point(140, 140));
        setMinimumSize(new java.awt.Dimension(800, 600));
        setName("spec2frame"); // NOI18N
        setSize(new java.awt.Dimension(800, 600));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanelSearchDisplay.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "   Προβολή δεδομένων γευμάτων  ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14))); // NOI18N

        jPanelData.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabelMeal.setText("Όνομα γεύματος");

        jButtonSearch.setText("Αναζήτηση");
        jButtonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchActionPerformed(evt);
            }
        });

        jLabelResults.setText("Αποτελέσματα αναζήτησης");

        jButtonDisplay.setText("Εμφάνιση");
        jButtonDisplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDisplayActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelDataLayout = new javax.swing.GroupLayout(jPanelData);
        jPanelData.setLayout(jPanelDataLayout);
        jPanelDataLayout.setHorizontalGroup(
            jPanelDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDataLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelDataLayout.createSequentialGroup()
                        .addGroup(jPanelDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(filler6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanelDataLayout.createSequentialGroup()
                                .addGroup(jPanelDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanelDataLayout.createSequentialGroup()
                                        .addComponent(jLabelMeal)
                                        .addGap(18, 18, 18)
                                        .addComponent(jTextFieldMeal, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanelDataLayout.createSequentialGroup()
                                        .addComponent(jLabelResults)
                                        .addGap(18, 18, 18)
                                        .addComponent(jComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(jPanelDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButtonSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButtonDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanelDataLayout.createSequentialGroup()
                        .addComponent(filler5, javax.swing.GroupLayout.PREFERRED_SIZE, 445, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        jPanelDataLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabelMeal, jLabelResults});

        jPanelDataLayout.setVerticalGroup(
            jPanelDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDataLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(filler5, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelMeal)
                    .addComponent(jTextFieldMeal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSearch))
                .addGap(18, 18, 18)
                .addGroup(jPanelDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelResults)
                    .addComponent(jComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonDisplay))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(filler6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanelDataLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabelMeal, jLabelResults});

        jButtonDelete.setText("Διαγραφή δεδομένων γεύματος");
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });

        jButtonEdit.setText("Επεξεργασία δεδομένων γεύματος");
        jButtonEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditActionPerformed(evt);
            }
        });

        jButtonSave.setText("Αποθήκευση δεδομένων γεύματος");
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        jSeparator.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabelMealName.setText("Όνομα γεύματος : ");

        jLabelMealCategory.setText("Κατηγορία γεύματος : ");

        jLabelMealOrigin.setText("Θεματική περιοχή γεύματος : ");

        jLabelMealGuide.setText("Oδηγίες παρασκευής γεύματος :");

        jTextAreaGuide.setColumns(20);
        jTextAreaGuide.setRows(5);
        jScrollPane.setViewportView(jTextAreaGuide);

        jTextFieldMealid.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel1.setText("Μοναδικός Αριθμός (id) :");

        javax.swing.GroupLayout jPanelSearchDisplayLayout = new javax.swing.GroupLayout(jPanelSearchDisplay);
        jPanelSearchDisplay.setLayout(jPanelSearchDisplayLayout);
        jPanelSearchDisplayLayout.setHorizontalGroup(
            jPanelSearchDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSearchDisplayLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelSearchDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(filler7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(filler3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(filler4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelSearchDisplayLayout.createSequentialGroup()
                        .addComponent(jButtonSave, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                        .addComponent(jButtonEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(49, 49, 49)
                        .addComponent(jButtonDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSeparator, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanelSearchDisplayLayout.createSequentialGroup()
                        .addComponent(jLabelMealGuide)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane))
                    .addGroup(jPanelSearchDisplayLayout.createSequentialGroup()
                        .addGroup(jPanelSearchDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanelSearchDisplayLayout.createSequentialGroup()
                                .addComponent(jLabelMealCategory)
                                .addGap(18, 18, 18)
                                .addComponent(jTextFieldMealCategory))
                            .addGroup(jPanelSearchDisplayLayout.createSequentialGroup()
                                .addComponent(jLabelMealOrigin)
                                .addGap(18, 18, 18)
                                .addComponent(jTextFieldMealArea))
                            .addGroup(jPanelSearchDisplayLayout.createSequentialGroup()
                                .addComponent(jLabelMealName)
                                .addGap(18, 18, 18)
                                .addComponent(jTextFieldMealName, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jTextFieldMealid)))
                .addContainerGap())
        );

        jPanelSearchDisplayLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabelMealCategory, jLabelMealGuide, jLabelMealName, jLabelMealOrigin});

        jPanelSearchDisplayLayout.setVerticalGroup(
            jPanelSearchDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSearchDisplayLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(filler3, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filler7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelSearchDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelMealName)
                    .addComponent(jTextFieldMealName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldMealid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(jPanelSearchDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelMealCategory)
                    .addComponent(jTextFieldMealCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelSearchDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelMealOrigin)
                    .addComponent(jTextFieldMealArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelSearchDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelSearchDisplayLayout.createSequentialGroup()
                        .addComponent(jLabelMealGuide)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelSearchDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSave, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filler4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanelSearchDisplayLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabelMealCategory, jLabelMealGuide, jLabelMealName, jLabelMealOrigin});

        jMenu1.setText("Meals");

        jMenuItemR3.setText("Προβολή γευμάτων ανά κατηγορία");
        jMenuItemR3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemR3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemR3);

        jMenuItemR4.setText("Προβολή στατιστικών / Eκτύπωση αρχείου PDF");
        jMenuItemR4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemR4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemR4);
        jMenu1.add(jSeparator1);

        jMenuItemHome.setText("Αρχική οθόνη");
        jMenuItemHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemHomeActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemHome);

        jMenuBar.add(jMenu1);

        jMenuMeal.setText("Γεύμα");

        jMenuItemMealSearch.setText("Αναζήτηση");
        jMenuItemMealSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemMealSearchActionPerformed(evt);
            }
        });
        jMenuMeal.add(jMenuItemMealSearch);

        jMenuItemMealDisplay.setText("Εμφάνιση επιλογής");
        jMenuItemMealDisplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemMealDisplayActionPerformed(evt);
            }
        });
        jMenuMeal.add(jMenuItemMealDisplay);

        jMenuBar.add(jMenuMeal);

        jMenuEdit.setText("Επεξεργασία");

        jMenuItemEditSave.setText("Αποθήκευση");
        jMenuItemEditSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemEditSaveActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenuItemEditSave);

        jMenuItemEditEdit.setText("Επεξεργασία");
        jMenuItemEditEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemEditEditActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenuItemEditEdit);

        jMenuItemEditDelete.setText("Διαγραφή");
        jMenuItemEditDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemEditDeleteActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenuItemEditDelete);

        jMenuBar.add(jMenuEdit);

        setJMenuBar(jMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanelSearchDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addComponent(filler1, javax.swing.GroupLayout.DEFAULT_SIZE, 788, Short.MAX_VALUE)
                    .addComponent(filler2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanelSearchDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filler2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemHomeActionPerformed
        dispose();
        MainFrame_Home r1 = new MainFrame_Home();
        r1.setVisible(true);
    }//GEN-LAST:event_jMenuItemHomeActionPerformed

    private void jButtonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchActionPerformed
        // TODO add your handling code here:
        
        // try-catch block 
        // ο χρήστης αναζητεί το όνομα ενός γεύματος
        // και (εφόσον υπάρχει στο API)
        // εμφανίζονται τα δεδομένα του γεύματος
        try {
            // ανακτούμε το κείμενο από το jTextFieldMeal
            // και το αποθηκεύουμε σε μια μεταβλητή String που ονοματίζουμε "meal"
            String meal = jTextFieldMeal.getText();
            
            // δημιουργούμε URL για κλήση του MealDB API
            // για αναζήτηση γευμάτων με το όνομα που καθορίζεται στη μεταβλητή "meal"
            String urlToCall = "https://www.themealdb.com/api/json/v1/1/search.php?s=" + meal;

            // Δημιουργούμε ένα αντικείμενο (instance) της κλάσης OkHttpClient
            // που θα χρησιμοποιήσουμε για την υποβολή αιτημάτων HTTP
            OkHttpClient oc = new OkHttpClient();

            // Δημιουργούμε ένα νέο αίτημα HTTP χρησιμοποιώντας τη διεύθυνση URL
            // που δημιουργήσαμε παραπάνω 
            // και την εκχωρούμε σε μια μεταβλητή που ονομάζουμε "request"
            Request request = new Request.Builder().url(urlToCall).build();

            // Ξεκινάμε νέο try-catch block 
            // και δημιουργούμε ένα νέο αντικείμενο απόκρισης HTTP που ονομάζουμε "response"
            // ο χρήστης στέλνει το αίτημα HTTP και περιμένει απάντηση
            try (okhttp3.Response response = oc.newCall(request).execute()) {
                
                // Ελέγχουμε εάν η απάντηση είναι επιτυχής 
                // και εάν η απόκριση έχει "σώμα"
                if (response.isSuccessful() && response.body() != null) {

                    //Καταχωρούμε σε ένα String το αποτέλεσμα
                    // Ανακτούμε το σώμα της απόκρισης  
                    // και το εκχωρoούμε στην μεταβλητή (String) που ονομάζουμε "responseString"
                    String responseString = response.body().string();
                    // Εκτύπωση στην κονσόλα για τυχόν εντοπισμό σφαλμάτων
                    // System.out.println(responseString);
                    
                    // Δημιουργούμε ένα νέο αντικείμενο Gson
                    // Διαμόρφωση PrettyPrinting() κατά τη μετατροπή του JSON σε συμβολοσειρά
                    GsonBuilder builder = new GsonBuilder();
                    builder.setPrettyPrinting();
                    Gson gson = builder.create();

                    // Μετατρέπουμε το String απόκρισης σε JsonObject 
                    // και το εκχωρούμε σε μια μεταβλητή που ονομάζουμε "jsnOb" 
                    JsonObject jsnOb = gson.fromJson(responseString, JsonObject.class);
                    // Εκτύπωση στην κονσόλα για τυχόν εντοπισμό σφαλμάτων
                    // System.out.println(jsnOb);

                    // Δημιουργούμε έναν πίνακα JSON από το JsonObject 
                    // και τον εκχωρούμε σε μια μεταβλητή που ονομάζουμε "mealsArray"
                    JsonArray mealsArray = jsnOb.get("meals").getAsJsonArray();
                    // Εκτύπωση στην κονσόλα για τυχόν εντοπισμό σφαλμάτων
                    // System.out.println(mealsArray);

                    //Δημιουργούμε ένα νέο νέο DefaultComboBoxModel
                    // που θα παρέχει τα δεδομένα στο jComboBox
                    DefaultComboBoxModel cbModel = new DefaultComboBoxModel();

                    // Διαπερνούμε κάθε στοιχείο του πίνακα "mealsArray"
                    // ανακτούμε το όνομα κάθε γεύματος 
                    // και το προσθέτουμε στο "cbModel"
                    // Ετοιμάζουμε τα δεδομένα που θα εμφανιστούν στο jComboBox
                    for (JsonElement jsonElement : mealsArray) {
                        JsonObject j = jsonElement.getAsJsonObject();
                        String name = j.get("strMeal").getAsString();
                        // Εκτύπωση στην κονσόλα για τυχόν εντοπισμό σφαλμάτων
                        // System.out.println(name);
                        cbModel.addElement(name);
                    }
                    // Εκχωρούμε το "cbModel" στο jComboBox
                    // το οποίο εμφανίζει τα ονόματα των γευμάτων στον χρήστη
                    jComboBox.setModel(cbModel);
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this,
                        "An error occurred: " + e.getMessage(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                        "An error occurred: " + e.getMessage(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
        }

        
    }//GEN-LAST:event_jButtonSearchActionPerformed

    private void jButtonDisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDisplayActionPerformed
        // Αρχικά αναζητούμε στην ΒΔ το γεύμα
        
        // try-catch block
        try {
            // Δηλώνουμε μια μεταβλητή q τύπου Query και την αρχικοποιούμε στο αποτέλεσμα 
            // του ερωτήματος Meals.findByStrmeal που δημιουργείται από το αντικείμενο EntityManager em
            Query q = em.createNamedQuery("Meals.findByStrmeal");
            q.setParameter("strmeal", jComboBox.getSelectedItem().toString());

            // Ελέγχουμε εάν η λίστα αποτελεσμάτων του ερωτήματος q είναι κενή
            // και αν είναι κενή (true) σημαίνει ότι δεν βρέθηκε το γεύμα στη ΒΔ
            if (q.getResultList().isEmpty()) {
                try {
                    String meal = jComboBox.getSelectedItem().toString();
                    
                    // Δημιουργούμε την διεύθυνση URL για την κλήση του API
                    String urlToCall = "https://www.themealdb.com/api/json/v1/1/search.php?s=" + meal;

                    // Δημιουργούμε ένα αντικείμενο (instance) της κλάσης OkHttpClient
                    // που θα χρησιμοποιήσουμε για την υποβολή αιτημάτων HTTP
                    OkHttpClient oc = new OkHttpClient();
                    
                    // Δημιουργούμε ένα νέο αίτημα HTTP χρησιμοποιώντας τη διεύθυνση URL
                    // που δημιουργήσαμε παραπάνω 
                    // και την εκχωρούμε σε μια μεταβλητή που ονομάζουμε "request"
                    Request request = new Request.Builder().url(urlToCall).build();

                    // Ξεκινάμε νέο try-catch block 
                    // και δημιουργούμε ένα νέο αντικείμενο απόκρισης HTTP που ονομάζουμε "response"
                    // ο χρήστης στέλνει το αίτημα HTTP και περιμένει απάντηση
                    try (okhttp3.Response response = oc.newCall(request).execute()) {

                        // Ελέγχουμε εάν η απάντηση είναι επιτυχής 
                        // και εάν η απόκριση έχει "σώμα"
                        if (response.isSuccessful() && response.body() != null) {

                            //Καταχωρούμε σε ένα String το αποτέλεσμα
                            // Ανακτούμε το σώμα της απόκρισης  
                            // και το εκχωρoούμε στην μεταβλητή (String) που ονομάζουμε "responseString"
                            String responseString = response.body().string();
                            
                            // Δημιουργούμε ένα νέο αντικείμενο Gson
                            // Διαμόρφωση PrettyPrinting() κατά τη μετατροπή του JSON σε συμβολοσειρά
                            GsonBuilder builder = new GsonBuilder();
                            builder.setPrettyPrinting();
                            Gson gson = builder.create();

                            // Μετατρέπουμε το String απόκρισης σε JsonObject
                            // και το εκχωρούμε σε μια μεταβλητή που ονομάζουμε "jsnOb"
                            JsonObject jsnOb = gson.fromJson(responseString, JsonObject.class);
                            
                            // Δημιουργούμε έναν πίνακα JSON από το JsonObject
                            // και τον εκχωρούμε σε μια μεταβλητή που ονομάζουμε "mealsArray"
                            JsonArray mealsArray = jsnOb.get("meals").getAsJsonArray();
                            
                            // Με τον βρόχο for διατρέχουμε τον πίνακα JSON "mealsArray" 
                            // και εμφανίζουμε πληροφορίες σχετικά με το επιλεγμένο γεύμα στα αντίστοιχα πεδία
                            // Εάν παρουσιαστεί κάποια εξαίρεση εμφανίζεται μήνυμα σφάλματος
                            for (JsonElement jsonElement : mealsArray) {
                                JsonObject m = jsonElement.getAsJsonObject();
                                String idMeal = m.get("idMeal").getAsString();
                                jTextFieldMealid.setText(idMeal);
                                String strMeal = m.get("strMeal").getAsString();
                                jTextFieldMealName.setText(strMeal);
                                String strCategory = m.get("strCategory").getAsString();
                                jTextFieldMealCategory.setText(strCategory);
                                String strArea = m.get("strArea").getAsString();
                                jTextFieldMealArea.setText(strArea);
                                String strInstructions = m.get("strInstructions").getAsString();
                                jTextAreaGuide.setText(strInstructions);
                            }
                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(this,
                        "An error occurred: " + e.getMessage(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this,
                        "An error occurred: " + e.getMessage(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                }
            } else {
                // η λίστα αποτελεσμάτων του ερωτήματος q δεν είναι κενή
                // σημαίνει ότι το γεύμα βρέθηκε στη ΒΔ
                
                // Εντοπίζουμε το αντικείμενο
                Meals meal = (Meals) q.getSingleResult();
                //Αυξάνουμε την προβολή του γεύματος
                meal.addProjections();
                //Ενημερώνουμε τη ΒΔ
                mealsController.edit(meal);
                
                // Εμφανίζουμε τις αντίστοιχες πληροφορίες
                Integer mealid = meal.getMealid();
                jTextFieldMealid.setText(Integer.toString(mealid));
                String strMeal = meal.getStrmeal();
                jTextFieldMealName.setText(strMeal);
                String strCategory = meal.getStrcategory();
                jTextFieldMealCategory.setText(strCategory);
                String strArea = meal.getStrarea();
                jTextFieldMealArea.setText(strArea);
                String strInstructions = meal.getStrinstructions();
                jTextAreaGuide.setText(strInstructions);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                        "An error occurred: " + e.getMessage(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_jButtonDisplayActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        dispose();
        MainFrame_Home r1 = new MainFrame_Home();
        r1.setVisible(true);
    }//GEN-LAST:event_formWindowClosing

    private void jMenuItemMealSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemMealSearchActionPerformed
        // Ομοίως με το jButtonSearchActionPerformed()
        
        try {
            
            String meal = jTextFieldMeal.getText();
            String urlToCall = "https://www.themealdb.com/api/json/v1/1/search.php?s=" + meal;
            OkHttpClient oc = new OkHttpClient();
            Request request = new Request.Builder().url(urlToCall).build();
            
            try (okhttp3.Response response = oc.newCall(request).execute()) {
                if (response.isSuccessful() && response.body() != null) {
                    String responseString = response.body().string();
                    GsonBuilder builder = new GsonBuilder();
                    builder.setPrettyPrinting();
                    Gson gson = builder.create();
                    JsonObject jsnOb = gson.fromJson(responseString, JsonObject.class);
                    JsonArray mealsArray = jsnOb.get("meals").getAsJsonArray();
                    
                    DefaultComboBoxModel cbModel = new DefaultComboBoxModel();
                    for (JsonElement jsonElement : mealsArray) {
                        JsonObject j = jsonElement.getAsJsonObject();
                        String name = j.get("strMeal").getAsString();
                        cbModel.addElement(name);
                    }
                    jComboBox.setModel(cbModel);
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this,
                        "An error occurred: " + e.getMessage(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                        "An error occurred: " + e.getMessage(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jMenuItemMealSearchActionPerformed

    private void jMenuItemMealDisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemMealDisplayActionPerformed
        // Ομοίως όπως στο jButtonDisplayActionPerformed()
        
        try {
            
            Query q = em.createNamedQuery("Meals.findByStrmeal");
            q.setParameter("strmeal", jComboBox.getSelectedItem().toString());

            if (q.getResultList().isEmpty()) {
                try {
                    String meal = jComboBox.getSelectedItem().toString();
                    String urlToCall = "https://www.themealdb.com/api/json/v1/1/search.php?s=" + meal;
                    OkHttpClient oc = new OkHttpClient();
                    Request request = new Request.Builder().url(urlToCall).build();

                    try (okhttp3.Response response = oc.newCall(request).execute()) {
                        if (response.isSuccessful() && response.body() != null) {
                            String responseString = response.body().string();
                            GsonBuilder builder = new GsonBuilder();
                            builder.setPrettyPrinting();
                            Gson gson = builder.create();
                            JsonObject jsnOb = gson.fromJson(responseString, JsonObject.class);
                            JsonArray mealsArray = jsnOb.get("meals").getAsJsonArray();
                            for (JsonElement jsonElement : mealsArray) {
                                JsonObject m = jsonElement.getAsJsonObject();
                                String strMeal = m.get("strMeal").getAsString();
                                jTextFieldMealName.setText(strMeal);
                                String strCategory = m.get("strCategory").getAsString();
                                jTextFieldMealCategory.setText(strCategory);
                                String strArea = m.get("strArea").getAsString();
                                jTextFieldMealArea.setText(strArea);
                                String strInstructions = m.get("strInstructions").getAsString();
                                jTextAreaGuide.setText(strInstructions);
                            }
                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(this,
                        "An error occurred: " + e.getMessage(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this,
                        "An error occurred: " + e.getMessage(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                }
            } else {
                Meals meal = (Meals) q.getSingleResult();
                meal.addProjections();
                mealsController.edit(meal);
                
                Integer mealid = meal.getMealid();
                jTextFieldMealid.setText(Integer.toString(mealid));
                String strMeal = meal.getStrmeal();
                jTextFieldMealName.setText(strMeal);
                String strCategory = meal.getStrcategory();
                jTextFieldMealCategory.setText(strCategory);
                String strArea = meal.getStrarea();
                jTextFieldMealArea.setText(strArea);
                String strInstructions = meal.getStrinstructions();
                jTextAreaGuide.setText(strInstructions);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                        "An error occurred: " + e.getMessage(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_jMenuItemMealDisplayActionPerformed

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        // Ελέγχουμε εάν το γεύμα είναι ήδη καταχωρημένο στη ΒΔ
                
        Integer mealid = Integer.parseInt(jTextFieldMealid.getText());
        // Εκτύπωση στην κονσόλα για τυχόν εντοπισμό σφαλμάτων
        // System.out.println(mealid);
               
        Query q = em.createNamedQuery("Meals.findByMealid");
        q.setParameter("mealid", mealid);
        
        if (q.getResultList().isEmpty()) {
            try {
                // Ανακτούμε τα δεδομένα του γεύματος
                // από τα αντίστοιχα πεδία
                int id = Integer.parseInt(jTextFieldMealid.getText());
                String strmeal = jTextFieldMealName.getText();
                String strcategory = jTextFieldMealCategory.getText();
                String strarea = jTextFieldMealArea.getText();
                String strinstructions = jTextAreaGuide.getText();

                // Δημιουργούμε ένα νέο αντικείμενο Meals με τα δεδομένα που ανακτήθηκαν 
                Meals meal = new Meals();
                meal.setMealid(mealid);
                meal.setStrmeal(strmeal);
                meal.setStrcategory(strcategory);
                meal.setStrarea(strarea);
                meal.setStrinstructions(strinstructions);
                meal.setMealprojections(0);

                // Aποθηκεύουμε το νέο αντικείμενο Meals στη ΒΔ 
                // με τον Controller
                mealsController.create(meal);

                // Παράθυρο μηνύματος επιτυχημένης ενημέρωσης
                JOptionPane.showMessageDialog(this,
                        "Το γεύμα  "+strmeal+" καταχωρήθηκε στην Βάση Δεδομένων",
                        "Καταχώρηση", JOptionPane.INFORMATION_MESSAGE);
                
                // Εκτύπωση στην κονσόλα για τυχόν εντοπισμό σφαλμάτων
                //System.out.println("EntityManager: " + em);
                //System.out.println("NamedQuery: " + q);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this,
                        "An error occurred: " + e.getMessage(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        } else {
            // Παράθυρο μηνύματος προηγούμενης καταχώρησης
            JOptionPane.showMessageDialog(this,
                    "Υπάρχει προηγούμενη καταχώρηση του γεύματος \n"
                    +"στην Βάση Δεδομένων ",
                    "Ενημέρωση", JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_jButtonSaveActionPerformed

    private void jMenuItemEditSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemEditSaveActionPerformed
        // Ομοίως όπως στο jButtonSaveActionPerformed()
                
        int mealid = Integer.parseInt(jTextFieldMealid.getText());
        // Εκτύπωση στην κονσόλα για τυχόν εντοπισμό σφαλμάτων
        // System.out.println(mealid);
               
        Query q = em.createQuery("SELECT m FROM Meals m WHERE m.mealid = :mealid");
        q.setParameter("mealid", mealid);
        
        if (q.getResultList().isEmpty()) {
            try {
                int id = Integer.parseInt(jTextFieldMealid.getText());
                String strmeal = jTextFieldMealName.getText();
                String strcategory = jTextFieldMealCategory.getText();
                String strarea = jTextFieldMealArea.getText();
                String strinstructions = jTextAreaGuide.getText();

                Meals meal = new Meals();
                meal.setMealid(id);
                meal.setStrmeal(strmeal);
                meal.setStrcategory(strcategory);
                meal.setStrarea(strarea);
                meal.setStrinstructions(strinstructions);
                meal.setMealprojections(0);

                mealsController.create(meal);

                JOptionPane.showMessageDialog(this,
                        "Το γεύμα  "+strmeal+" καταχωρήθηκε στην Βάση Δεδομένων",
                        "Καταχώρηση", JOptionPane.INFORMATION_MESSAGE);
                
                // Εκτύπωση στην κονσόλα για τυχόν εντοπισμό σφαλμάτων
                //System.out.println("EntityManager: " + em);
                //System.out.println("NamedQuery: " + q);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this,
                        "An error occurred: " + e.getMessage(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        } else {
            // Παράθυρο μηνύματος προηγούμενης καταχώρησης
            JOptionPane.showMessageDialog(this,
                    "Υπάρχει προηγούμενη καταχώρηση του γεύματος \n"
                    +"στην Βάση Δεδομένων ",
                    "Ενημέρωση", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jMenuItemEditSaveActionPerformed

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
        // Λαμβάνουμε τo όνομα του γεύματος από το πεδίο κειμένου
        String m = jTextFieldMealName.getText();
        // Εμφανίζουμε ένα παράθυρο διαλόγου για την επιβεβαίωση της διαγραφής του γεύματος
        int option = JOptionPane.showConfirmDialog(this, "Είστε σίγουροι ότι θέλετε να διαγράψετε από\n"
                + "τη Βάση Δεδομένων το γεύμα " + m + " ;",
                "Επιβεβαίωση", JOptionPane.YES_NO_OPTION);
        // Εάν ο χρήστης επιλέξει "Yes", τότε προχωρούμε στη διαγραφή του γεύματος
        if (option == JOptionPane.YES_OPTION) {
            try {
                // Διαγραφή των δεδομένων του επιλεγμένου γεύματος
                // Έναρξη της διαδικασίας transaction
                etx.begin();
                // Λαμβάνουμε το μοναδικό αιθμό (id) του γεύματος 
                // από το αντίστοιχο πεδίο κειμένου
                Integer mealid = Integer.parseInt(jTextFieldMealid.getText());
                // Εκτύπωση στην κονσόλα για τυχόν εντοπισμό σφαλμάτων
                // System.out.println(mealid);
                
                //Δημιουργία query για την διαγραφή
                Query query = em.createQuery("DELETE FROM Meals m WHERE m.mealid = :mealid");
                query.setParameter("mealid", mealid).executeUpdate();

                // Ολοκληρώνουμε τη διαδικασία transaction
                etx.commit();
                // Εμφανίζουμε ένα παράθυρο διαλόγου ενημέρωσης
                JOptionPane.showMessageDialog(this, "Τα δεδομένα του γεύματος "+m
                        +" διαγράφηκαν από την Βάση Δεδομένων", "Ενημέρωση",
                        JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception e) {
                // Εκτύπωση στην κονσόλα για τυχόν εντοπισμό σφαλμάτων
                // System.out.println(e);
                JOptionPane.showMessageDialog(this, "Παρακαλώ επιλέξτε ένα γεύμα",
                        "Ενημέρωση",
                        JOptionPane.INFORMATION_MESSAGE);
            }
        }
        
    }//GEN-LAST:event_jButtonDeleteActionPerformed

    private void jMenuItemEditDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemEditDeleteActionPerformed
        // Ομοίως όπως στο jButtonDeleteActionPerformed()
        String m = jTextFieldMealName.getText();
        
        int option = JOptionPane.showConfirmDialog(this, "Είστε σίγουροι ότι θέλετε να διαγράψετε από\n"
                + "τη Βάση Δεδομένων το γεύμα " + m + " ;",
                "Επιβεβαίωση", JOptionPane.YES_NO_OPTION);
        
        if (option == JOptionPane.YES_OPTION) {
            try {
                etx.begin();
                // Λαμβάνουμε το μοναδικό αιθμό (id) του γεύματος 
                // από το αντίστοιχο πεδίο κειμένου
                Integer mealid = Integer.parseInt(jTextFieldMealid.getText());
                // Εκτύπωση στην κονσόλα για τυχόν εντοπισμό σφαλμάτων
                // System.out.println(mealid);
                
                //Δημιουργία query για την διαγραφή
                Query query = em.createQuery("DELETE FROM Meals m WHERE m.mealid = :mealid");
                query.setParameter("mealid", mealid).executeUpdate();

                // Ολοκληρώνουμε τη διαδικασία transaction
                etx.commit();
                
                JOptionPane.showMessageDialog(this, "Τα δεδομένα του γεύματος "+m
                        +" διαγράφηκαν από την Βάση Δεδομένων", "Ενημέρωση",
                        JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception e) {
                // Εκτύπωση στην κονσόλα για τυχόν εντοπισμό σφαλμάτων
                // System.out.println(e);
                JOptionPane.showMessageDialog(this, "Παρακαλώ επιλέξτε ένα γεύμα",
                        "Ενημέρωση",
                        JOptionPane.INFORMATION_MESSAGE);
            }
        }
        
    }//GEN-LAST:event_jMenuItemEditDeleteActionPerformed

    private void jButtonEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditActionPerformed
        // Λαμβάνουμε τo όνομα του γεύματος από το πεδίο κειμένου
        String m = jTextFieldMealName.getText();
        // Εμφανίζουμε ένα παράθυρο διαλόγου για την επιβεβαίωση της διαγραφής του γεύματος
        
        int option = JOptionPane.showConfirmDialog(this, "Είστε σίγουροι ότι θέλετε να τροποποιήσετε το\n"
                + " γεύμα " + m + " στη Βάση Δεδομένων;",
                "Επιβεβαίση", JOptionPane.YES_NO_OPTION);
        if (option == JOptionPane.YES_OPTION) {
            try {
                //Πέρνουμε τα δεδομένα από την φόρμα
                Integer id = Integer.parseInt(jTextFieldMealid.getText());
                String strmeal = jTextFieldMealName.getText();
                String strcategory = jTextFieldMealCategory.getText();
                String strarea = jTextFieldMealArea.getText();
                String strinstructions = jTextAreaGuide.getText();
                
                Meals meal = new Meals();
                meal.setMealid(id);
                meal.setStrmeal(strmeal);
                meal.setStrcategory(strcategory);
                meal.setStrarea(strarea);
                meal.setStrinstructions(strinstructions);
                meal.setMealprojections(0);
                
                mealsController.edit(meal);

                JOptionPane.showMessageDialog(this, "Το γεύμα " + m + " τροποποιήθηκε", 
                        "Ενημέρωση",
                        JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception e) {
                // Εκτύπωση στην κονσόλα για τυχόν εντοπισμό σφαλμάτων
                // System.out.println(e);
                JOptionPane.showMessageDialog(this, "Παρακαλώ επιλέξτε ένα γεύμα",
                        "Ενημέρωση",
                        JOptionPane.INFORMATION_MESSAGE);
            }
        }
        
    }//GEN-LAST:event_jButtonEditActionPerformed

    private void jMenuItemEditEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemEditEditActionPerformed
        // Ομοίως όπως στο jButtonEditActionPerformed()
        String m = jTextFieldMealName.getText();
                
        int option = JOptionPane.showConfirmDialog(this, "Είστε σίγουροι ότι θέλετε να τροποποιήσετε το\n"
                + " γεύμα " + m + " στη Βάση Δεδομένων;",
                "Επιβεβαίση", JOptionPane.YES_NO_OPTION);
        if (option == JOptionPane.YES_OPTION) {
            try {
                int id = Integer.parseInt(jTextFieldMealid.getText());
                String strmeal = jTextFieldMealName.getText();
                String strcategory = jTextFieldMealCategory.getText();
                String strarea = jTextFieldMealArea.getText();
                String strinstructions = jTextAreaGuide.getText();
                
                Meals meal = new Meals();
                meal.setMealid(id);
                meal.setStrmeal(strmeal);
                meal.setStrcategory(strcategory);
                meal.setStrarea(strarea);
                meal.setStrinstructions(strinstructions);
                meal.setMealprojections(0);
                
                mealsController.edit(meal);

                JOptionPane.showMessageDialog(this, "Το γεύμα " + m + " τροποποιήθηκε", 
                        "Ενημέρωση",
                        JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception e) {
                // Εκτύπωση στην κονσόλα για τυχόν εντοπισμό σφαλμάτων
                // System.out.println(e);
                JOptionPane.showMessageDialog(this, "Παρακαλώ επιλέξτε ένα γεύμα",
                        "Ενημέρωση",
                        JOptionPane.INFORMATION_MESSAGE);
            }
        }
        
    }//GEN-LAST:event_jMenuItemEditEditActionPerformed

    private void jMenuItemR3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemR3ActionPerformed
        this.dispose();
        R3Frame r3 = new R3Frame();
        r3.setVisible(true);
    }//GEN-LAST:event_jMenuItemR3ActionPerformed

    private void jMenuItemR4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemR4ActionPerformed
        this.dispose();
        R4Frame r4 = new R4Frame();
        r4.setVisible(true);
    }//GEN-LAST:event_jMenuItemR4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        // Set the LookAndFeel enviroment
        FlatDarculaLaf.setup();
        UIManager.put( "Button.arc", 888 );
        UIManager.put( "Component.arc", 888 );
        UIManager.put( "TextComponent.arc", 888 );

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new R2Frame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler3;
    private javax.swing.Box.Filler filler4;
    private javax.swing.Box.Filler filler5;
    private javax.swing.Box.Filler filler6;
    private javax.swing.Box.Filler filler7;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonDisplay;
    private javax.swing.JButton jButtonEdit;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JButton jButtonSearch;
    private javax.swing.JComboBox<String> jComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelMeal;
    private javax.swing.JLabel jLabelMealCategory;
    private javax.swing.JLabel jLabelMealGuide;
    private javax.swing.JLabel jLabelMealName;
    private javax.swing.JLabel jLabelMealOrigin;
    private javax.swing.JLabel jLabelResults;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JMenu jMenuEdit;
    private javax.swing.JMenuItem jMenuItemEditDelete;
    private javax.swing.JMenuItem jMenuItemEditEdit;
    private javax.swing.JMenuItem jMenuItemEditSave;
    private javax.swing.JMenuItem jMenuItemHome;
    private javax.swing.JMenuItem jMenuItemMealDisplay;
    private javax.swing.JMenuItem jMenuItemMealSearch;
    private javax.swing.JMenuItem jMenuItemR3;
    private javax.swing.JMenuItem jMenuItemR4;
    private javax.swing.JMenu jMenuMeal;
    private javax.swing.JPanel jPanelData;
    private javax.swing.JPanel jPanelSearchDisplay;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JSeparator jSeparator;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTextArea jTextAreaGuide;
    private javax.swing.JTextField jTextFieldMeal;
    private javax.swing.JTextField jTextFieldMealArea;
    private javax.swing.JTextField jTextFieldMealCategory;
    private javax.swing.JTextField jTextFieldMealName;
    private javax.swing.JTextField jTextFieldMealid;
    // End of variables declaration//GEN-END:variables
}
